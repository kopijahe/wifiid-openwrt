#!/bin/sh
# shellcheck disable=3010

# Script untuk login otomatis di jaringan wifi.id dan WMS
# Oleh: KopiJahe (https://kopijahe.my.id)

# shellcheck disable=SC1091
# Muat library network OpenWrt
. /lib/functions/network.sh

# Buat berkas baru untuk menyimpan konfigurasi autologin
touch /etc/config/kopijahe

# variabel advancedmode="true" adalah penanda agar
# fungsi loop autologin tidak dijalankan

versi() {
	# Fungsi versi aplikasi
	# Tentukan versi dengan mengubah variabel "ver"
	ver="2.6.0"
}

bantuan() {
	versi
	echo "Aplikasi autologin KopiJahe"
	echo "http://kopijahe.my.id/"
	echo "Versi aplikasi: $ver"
	echo ""
	echo "Penggunaan: kopijahe [-b] [-i] [-u \"<username>\"] [-p \"<password>\"] [-l \"<yes|no>\"] [-c \"<provider>\"] [-v \"<varian>\"] [-m <nomor urut autologin>] [-a]"
	echo "-a: deteksi otomatis jaringan wifi.id atau wms dan turunannya (harus dalam keadaan terkoneksi namun logout dari jaringan)"
	echo "-b: unduh versi script terbaru"
	echo "-c: masukkan penyedia layanan cek captive portal dengan 2 tanda kutip"
	echo "-d: masukkan URL halaman landing (bisa digunakan sebagai pengganti opsi \"-a\" jika deteksi otomatis tidak berhasil)"
	echo "-f: masukkan berkas login_file.txt dengan 2 tanda kutip (misal: \"\etc\login_file.txt\")"
	echo "-h: tampilkan halaman ini"
	echo "-i: instalasi aplikasi autologin"
	echo "-k: matikan semua proses autologin KopiJahe"
	echo "-l: konfigurasi load-balance, diisi \"yes\" atau \"no\", lalu masukkan interface yang akan digunakan (misal: wwan, wwan1)"
	echo "-s: masuk mode auto-reconnect seamless"
	echo "-t: tes dan tampilkan semua konfigurasi aplikasi"
	echo "-u: masukkan username yang digunakan untuk login dengan 2 tanda kutip"
	echo "-m: multi-autologin, masukkan angka jumlah autologin akan yang digunakan"
	echo "-o: lakukan logout secara manual (supaya akun tidak tersangkut)"
	echo "-p: masukkan password yang digunakan untuk login dengan 2 tanda kutip"
	echo "-v: masukkan varian jaringan wifi yang digunakan dengan 2 tanda kutip"
	echo "-w: masukkan lama waktu pengulangan dalam satuan detik (default: 10 detik)"
	echo "-x: masuk ke mode debug (untuk keperluan analisa jika gagal autologin)"
	echo "-z: lakukan login secara manual (untuk keperluan analisa jika gagal autologin)"
	echo ""
	echo "Varian jaringan yang didukung:"
	echo "\"wifi.id\", \"wms\", \"wms-lite\", \"kampus\", \"smartbisnis\", \"sso\", \"rumah-sakit\", \"wico\", \"grosirbersama\", \"internetku\", \"gift\", \"starwifi\", \"pegadaian\", \"homewifi\""
	echo "Coba gunakan \"komunitas-generik\" jika komunitas atau kampus anda belum didukung secara langsung oleh script."
	echo ""
	echo "Penyedia layanan cek captive portal yang didukung:"
	echo "\"kopijahe\" (default), \"kopijahe2\", \"firefox\", \"google\", \"google2\", \"apple\", \"apple2\", \"microsoft\", \"microsoft2\", \"xiaomi\", \"httpforever\", \"neverssl\", \"ubuntu\", \"archlinux\"""\"kopijahe\" (default), \"firefox\", \"google\", \"google2\", \"apple\", \"apple2\", \"microsoft\", \"microsoft2\", \"xiaomi\", \"httpforever\", \"neverssl\", \"ubuntu\", \"archlinux\", \"examplecom\""
	echo ""
	echo "=========================================================================="
	echo ""
	echo "Contoh penggunaan:"
	echo ""
	echo "Penggunaan untuk 1 autologin (deteksi otomatis URL halaman landing):"
	echo "kopijahe -l \"no\" -u \"halo@kopijahe.my.id\" -p \"en4kbang3t\" -v \"wifi.id\" -a"
	echo ""
	echo "Penggunaan untuk 1 autologin (masukkan manual URL halaman landing):"
	echo "kopijahe -l \"no\" -u \"halo@kopijahe.my.id\" -p \"en4kbang3t\" -v \"wifi.id\" -d"
	echo ""
	echo "Penggunaan untuk 2 autologin:"
	echo "kopijahe -m 1 -l \"yes\" -u \"halo@kopijahe.my.id\" -p \"en4kbang3t\" -v \"smartbisnis\" -a"
	echo "kopijahe -m 2 -l \"yes\" -u \"hola@kopijahe.my.id\" -p \"n1kmats3kali\" -v \"smartbisnis\" -a"
	echo ""
	echo "Penggunaan untuk 1 auto-reconnect seamless (diletakkan di berkas /etc/rc.local):"
	echo "kopijahe -s"
	echo ""
	echo "Penggunaan dengan berkas tangkapan login CURL (login_file.txt) via Google Chrome (diletakkan di berkas /etc/rc.local):"
	echo "kopijahe -f \"/etc/login_file.txt\""
	echo ""
	echo "Login manual jika autologin gagal (untuk keperluan analisa jika gagal autologin):"
	echo "kopijahe -x -z"
	echo "kopijahe -x -m 1 -z"
	echo "kopijahe -x -m 2 -z"
	exit 0
}

detectconfig() {
	# Fungsi cek pengaturan
	
	# Cek apakah belum ada pengaturan autologin sebelumnya
	# Jika benar, maka:
	# shellcheck disable=SC2086
	if [[ "$advancedmode" = "true" ]] && [[ "$(uci -q show kopijahe.@autologin[$multiautologincfg])" = "" ]]; then
		# Tambahkan pengaturan baru
		uci add kopijahe autologin
	fi
}

osversioncheck() {
	# Fungsi cek versi rilis LEDE/OpenWrt
	osversion="$(grep VERSION_ID /etc/os-release | awk -F'[=]' '{print $2}' | awk -F'[".]' '{print $2}')"
	export osversion
	
	# Jika rilis OpenWrt adalah 14.x atau 15.x, maka beritahu pengguna bahwa versi rilis tidak didukung oleh aplikasi ini
	if [[ "$osversion" = "14" ]] || [[ "$osversion" = "15" ]]; then
		echo "Rilis openwrt di bawah versi 17.01 tidak didukung"
		exit 1
	fi
	
	# Jika digunakan untuk STB (board sunxi), maka anggap versi os sama dengan LEDE 17.01
	# Karena rata-rata STB apabila di-reboot, maka jam akan terpaut jauh daripada dunia nyata
	# Cek board OpenWrt
	openwrt_board="$(grep OPENWRT_BOARD /etc/os-release | awk -F'["=/]' '{print $3}')"
	
	# Jika tidak menggunakan parameter OPENWRT_BOARD, coba parameter LEDE_BOARD
	if [[ "$openwrt_board" = "" ]]; then
		openwrt_board="$(grep LEDE_BOARD /etc/os-release | awk -F'["=/]' '{print $3}')"
	fi
	
	# Jika digunakan untuk STB (board sunxi), maka anggap versi os sama dengan LEDE 17.01
	if [[ "$openwrt_board" = "sunxi" ]]; then
		osversion="17"
		export osversion
	fi
}

randommaccheck() {
	# Jika tidak terdeteksi perangkat memiliki MAC address acak, maka:
	if [[ "$detectrandommac" = "" ]]; then
		# Tentukan MAC address dari berkas pengaturan
		clientmac="$(uci -q get kopijahe.@autologin["$multiautologinnum"].clientmac)"
	# Jika terdeteksi MAC address acak, maka:
	else
		# Tentukan MAC address dari hasil ifconfig
		clientmac="$(ifconfig "$wandevice" | grep HWaddr | awk -F'[ ]' '{print $10}')"
	fi
}

mwan3check() {
	# Fungsi cek mwan3
	# Untuk mengecek apakah mwan3 terpasang atau tidak
	
	checkmwan3="$(mwan3 --help 2> /dev/null)"
	
	# Jika perintah sebelumnya menghasilkan kode 127, maka
	if [[ "$?" = "127" ]]; then
		# Tentukan bahwa mwan3 tidak terpasang
		checkmwan3="no"
	# Jika tidak, maka:
	else
		# Tentukan bahwa mwan3 terpasang
		checkmwan3="ok"
	fi
	
	# Jika mwan3 terpasang, cek juga apakah mwan3 yang terpasang memiliki fungsi "use" atau tidak
	
	if [[ "$checkmwan3" = "ok" ]]; then
		checkmwan3use="$(mwan3 use 2> /dev/null)"
	fi
	
	if [[ "$checkmwan3use" = "no command specified for mwan3 use" ]]; then
		# Tentukan bahwa mwan3 memiliki fungsi "use"
		checkmwan3use="ok"
	else
		# Tentukan bahwa mwan3 tidak memiliki fungsi "use"
		checkmwan3use="no"
	fi
}

multiautologin() {
	# Fungsi multi-autologin
	# Tentukan nomor konfigurasi yang akan digunakan
	# sesuai dengan input dari pengguna
	#
	# Jika tidak ada input dari pengguna, atau
	# input tidak valid (nol, atau bukan angka), maka:
	if [[ "$inputmultiautologin" = "0" ]] || [[ "$inputmultiautologin" = "" ]]; then
		# Tentukan bahwa konfigurasi pertamalah
		# yang akan dipakai
		inputmultiautologin="1"
	fi
	# Karena urutan konfigurasi dimulai dari angka 0
	# maka, kurangi hasil dari input pengguna
	multiautologincfg="$((inputmultiautologin-1))"
	detectconfig
	
	# shellcheck disable=SC2086
	if [[ "$(uci -q get kopijahe.@autologin[$multiautologincfg].multi_autologin)" = "" ]]; then
		uci set kopijahe.@autologin["$multiautologincfg"].multi_autologin="$multiautologincfg"
		uci commit kopijahe
	fi
	
	# shellcheck disable=SC2086
	multiautologinnum="$(uci -q get kopijahe.@autologin[$multiautologincfg].multi_autologin)"
}

install() {
	# Fungsi instalasi aplikasi
	# Beritahu pengguna bahwa proses instalasi dimulai
	advancedmode="true"
	multiautologin
	versi
	echo "Memasang Autologin KopiJahe..."
	# Kopi berkas ke folder /usr/bin/
	cp -f "$0" /usr/bin/kopijahe
	# Beri izin eksekusi
	chmod +x /usr/bin/kopijahe
	# Beritahu pengguna versi autologin saat ini
	echo "Versi aplikasi autologin saat ini: $ver"
	
	# Cek apakah curl sudah tersedia di sistem
	checkcurl="$(curl --version)"
	# Jika hasil cek kosong, berarti curl belum tersedia, maka:
	if [[ "$checkcurl" = "" ]]; then
		# Perbarui daftar aplikasi
		opkg update
		# Unduh dan pasang curl
		opkg install curl
	fi
}

killkopijahe() {
	# Fungsi matikan aplikasi
	advancedmode="true"
	# Cari tahu PID dari semua proses kopijahe (kecuali yang menjalankan fungsi ini), lalu matikan
	pgrep -f "kopijahe" | grep -v "^$$" | xargs kill
}

update() {
	advancedmode="true"
	versi
	# Fungsi pembaruan aplikasi autologin
	# Unduh versi terbaru dari github
	# dan letakkan hasilnya di folder /tmp terlebih dahulu
	curl --silent https://raw.githubusercontent.com/kopijahe/wifiid-openwrt/master/scripts/kopijahe -o /tmp/kopijahe-update
	# Beritahu pengguna versi autologin sebelum diperbarui
	echo "Versi aplikasi autologin sebelumnya: $ver"
	# Lakukan instalasi aplikasi
	sh /tmp/kopijahe-update -i
	# Bersihkan sisa berkas update
	rm /tmp/kopijahe-update
	# Matikan dulu semua proses autologin KopiJahe
	killkopijahe
	# Jalankan kembali proses autologin
	sh /etc/rc.local
}

generaterandomid() {
	# Buat 2 pasang karakter acak untuk keperluan login di jaringan WMS
	randomid="$(head -4 /dev/urandom | tr -dc "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" | head -c4)"
}


generaterandomhostname() {
	# Buat 16 karakter acak
	randomhostname="$(head -4 /dev/urandom | tr -dc "0123456789abcdefghijklmnopqrstuvwxyz" | head -c16)"
	# Rangkai hostname, dengan format: android-<16 karakter acak>
	randomhostname="android-""$randomhostname"
	# Terapkan hostname di interface yang digunakan
	uci set network."$waninterface".hostname="$randomhostname"
	uci commit network
	
	# Beri tanda bahwa sudah pernah mencoba mengganti hostname
	randomhostname="true"
}

detectwan() {
	# Deteksi perangkat jaringan WAN yang akan digunakan untuk login
	# Cek terlebih dahulu apakah menggunakan load-balance atau tidak, jika iya, maka:
	if [[ "$(uci -q get kopijahe.@autologin["$multiautologinnum"].loadbalance)" = "yes" ]]; then
		# Dapatkan konfigurasi perangkat dari berkas konfigurasi
		waninterface="$(uci -q get kopijahe.@autologin["$multiautologinnum"].waninterface)"
	# Jika tidak, maka:
	else
		# Catat di konfigurasi bahwa tidak ada load-balance
		uci set "kopijahe.@autologin[$multiautologinnum].loadbalance=no"
		# Simpan konfigurasi
		uci commit
		# Bersihkan cache jaringan terlebih dahulu
		network_flush_cache
		# Cari tahu interface WAN yang digunakan
		network_find_wan waninterface
	fi
	# Tentukan perangkat WAN yang digunakan sesuai dengan hasil di atas
	wandevice="$(ifstatus "$waninterface" | jsonfilter -e '@["device"]')"
	# Tentukan alamat IP yang digunakan sesuai dengan hasil di atas
	iprouter="$(ifstatus "$waninterface" | jsonfilter -e '@["ipv4-address"][0].address')"
}

detecturl() {
	# Fungsi deteksi URL halaman login
	detecturlcount=0
	
	# Lakukan pengulangan fungsi jika gagal
	while [[ "$detecturlcount" -lt 2 ]]; do
		
		# Cek apakah sebelumnya gagal
		if [[ "$deteksi" = "gagal" ]]; then
			# Jika iya, maka:
			# Tentukan URL deteksi
			urldetect="http://8.8.8.8/"
		else
			# Jika tidak, maka:
			# Tentukan URL deteksi
			urldetect="http://periksakoneksi.kopijahe.my.id/cek"
		fi
		
		# Deteksi URL login dengan cara melihat jawaban redirect dari halaman periksa koneksi
		deteksi="$(curl -k -I --silent --interface "$wandevice" --max-redirs 1 --connect-timeout 10 "$urldetect" | grep "Location")"
		
		# Jika gagal mendeteksi menggunakan teknik di atas, maka:
		if [[ "$deteksi" = "" ]]; then
			# Deteksi URL login dengan cara melihat URL landing di halaman redirect
			urllanding="$(curl -k -I --silent --interface "$wandevice" --max-redirs 1 --connect-timeout 10 "$urldetect" | grep URL | awk -F'[;]' '{print $2}' | head -c -3)"
			deteksi=" Location: $urllanding"
		fi
		
		# Jika masih saja gagal, maka:
		if [[ "$deteksi" = "" ]]; then
			urllanding="$(curl -k -I --silent --interface "$wandevice" --max-redirs 1 --connect-timeout 10 "$urldetect" | grep URL | awk -F'[;]' '{print $2}' | head -c -3 | awk -F'[=]' '{print $2"="$3"="$4"="$5"="$6"="$7}')"
			deteksi=" Location: $urllanding"
		fi
		
		# Jika ternyata masih saja gagal, maka:
		if [[ "$deteksi" = "" ]]; then
			# Nyatakan deteksi gagal
			deteksi="gagal"
			detecturlcount="$((detecturlcount+1))"
		else
			detecturlcount=2
		fi
	done
}

setup() {
	# Fungsi penyiapan berkas konfigurasi autologin
	advancedmode="true"
	
	# Jika digunakan untuk login di jaringan "wifi.id-lanjutkan", maka:
	if [[ "$(uci -q get kopijahe.@autologin["$multiautologinnum"].wifivariant)" = "wifi.id-lanjutkan" ]]; then
		# Deteksi tipe login (hasil "login" = wifi.id, hasil "wms" = wms)
		tipelogin="$(echo "$deteksi" | awk -F'[=&]' '{print $1}' | awk -F'[=/]' '{print $4"/"$5}')"
		# Deteksi variabel gw_id
		gwid="$(echo "$deteksi" | awk -F'[=&]' '{print $2}')"
		# Deteksi MAC address yang digunakan
		clientmac="$(echo "$deteksi" | awk -F'[=&]' '{print $8}')"
		# Deteksi variabel wlan_id
		wlanid="$(echo "$deteksi" | awk -F'[=&]' '{print $6}')"
		# Deteksi variabel session_id, filter hasilnya agar tidak ada error
		session_id="$(echo "$deteksi" | awk -F'[=&]' '{print $10}' | tr -dc "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-")"
		# Deteksi variabel server_id
		server_id="$(echo "$deteksi" | awk -F'[/]' '{print $3}')"
	# Jika tidak, maka:
	else
		# Deteksi tipe login (hasil "login" = wifi.id, hasil "wms" = wms)
		tipelogin="$(echo "$deteksi" | awk -F'[=&]' '{print $1}' | awk -F'[=/]' '{print $4}')"
		# Deteksi variabel gw_id
		gwid="$(echo "$deteksi" | awk -F'[=&]' '{print $2}')"
		# Deteksi MAC address yang digunakan
		clientmac="$(echo "$deteksi" | awk -F'[=&]' '{print $4}')"
		# Deteksi variabel wlan_id
		wlanid="$(echo "$deteksi" | awk -F'[=&]' '{print $6}')"
		# Deteksi variabel session_id, filter hasilnya agar tidak ada error
		session_id="$(echo "$deteksi" | awk -F'[=&]' '{print $8}' | tr -dc "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-")"
		# Deteksi variabel server_id
		server_id="$(echo "$deteksi" | awk -F'[/]' '{print $3}')"
	fi
	
	# Masukkan konfigurasi sesuai dengan hasil di atas dan sesuai dengan nomor konfigurasi multi-autologin
	uci set kopijahe.@autologin["$multiautologinnum"].tipelogin="$tipelogin"
	uci set kopijahe.@autologin["$multiautologinnum"].gwid="$gwid"
	uci set kopijahe.@autologin["$multiautologinnum"].clientmac="$clientmac"
	uci set kopijahe.@autologin["$multiautologinnum"].wlanid="$wlanid"
	uci set kopijahe.@autologin["$multiautologinnum"].sessionid="$session_id"
	uci set kopijahe.@autologin["$multiautologinnum"].serverid="$server_id"
	
	# Jika digunakan di jaringan WMS, maka tentukan variabel wms_id
	if [[ "$tipelogin" = "wms" ]]; then
		url_landing="$(echo "$deteksi" | awk -F'[ ]' '{print $2}')"
		# shellcheck disable=2020
		wms_id="$(curl --resolve "welcome2.wifi.id:443:10.233.16.32,10.233.16.13" --resolve "welcome3.wifi.id:443:118.98.34.148" -k --silent -L --interface "$wandevice" "$url_landing" | grep makeId | awk -F'[.]' '{print $4}' | tr -dc "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\n" | awk '!a[$0]++' | tr -d "\n")"
		uci set kopijahe.@autologin["$multiautologinnum"].wmsid="$wms_id"
	fi
	
	# Simpan konfigurasi
	uci commit kopijahe
}

loginblock() {
	# Fungsi cek blokir login
	# Buat berkas "/tmp/last.login.$waninterface" untuk menghindari error
	touch "/tmp/last.login.$waninterface"
	
	# Jika di dalam berkas ditemukan hasil "Bloked IP", maka:
	if [[ "$(grep -o "Blocked IP" "/tmp/last.login.$waninterface")" = "Blocked IP" ]]; then
		# Tentukan bahwa IP diblokir
		ipblocked=yes
	# Jika tidak ditemukan, maka:
	else
		# Tentukan bahwa IP tidak diblokir
		ipblocked=no
	fi
	
	# Jika di dalam berkas ditemukan hasil "Gagal Login", maka:
	if [[ "$(grep -o "Gagal Login" "/tmp/last.login.$waninterface")" = "Gagal Login" ]]; then
		# Tentukan bahwa login diblokir
		loginblocked=yes
	# Jika tidak ditemukan, maka:
	else
		# Tentukan bahwa login tidak diblokir
		loginblocked=no
	fi
}

refreshinterface() {
	# Matikan perangkat yang digunakan
	ifconfig "$wandevice" down
	# Hidupkan kembali perangkat yang digunakan
	ifconfig "$wandevice" up
	
	# Cek apakah digunakan untuk load-balance dan mwan3 terpasang, jika benar, maka:
	mwan3check
	if [[ "$(uci -q get kopijahe.@autologin["$multiautologinnum"].loadbalance)" = "yes" ]] && [[ "$checkmwan3" = "ok" ]]; then
		# Hidupkan interface tanpa menggunakan mwan3
		ifup "$waninterface"
		# Hidupkan juga interface di mwan3
		mwan3 ifup "$waninterface"
	# Jika tidak, maka:
	else
		# Hidupkan interface tanpa menggunakan mwan3
		ifup "$waninterface"
	fi
	# Reset kode status, supaya tidak terjadi pengulangan
	kodestatus=""
}

releaseobtainnewip() {
	# Fungsi meminta alamat IP baru
	# Cari tahu PID dari layanan DHCP client (udhcpc) yang digunakan
	udhcpcpid="$(cat /var/run/udhcpc-"$wandevice".pid)"
	# Matikan layanan DHCP Client dengan parameter SIGUSR2
	kill -SIGUSR2 "$udhcpcpid"
	
	refreshinterface
}

deviceclaimfailed() {
	# Fungsi deteksi error "DEVICE_CLAIM_FAILED"
	# Cek apakah muncul kode error di status interface
	claimfailed="$(ifstatus "$waninterface" | jsonfilter -e '@["errors"][0].code')"
	
	# Jika muncul kode error "DEVICE_CLAIM_FAILED", maka:
	if [[ "$claimfailed" = "DEVICE_CLAIM_FAILED" ]]; then
		# Perbarui interface
		refreshinterface
	fi
}

sleeptimer() {
	# Fungsi pengaturan waktu pengulangan autologin
	
	sleeptime="$(uci -q get kopijahe.@autologin["$multiautologinnum"].sleeptime)"
	
	# Jika konfigurasi tidak ditemukan, maka:
	if [[ "$sleeptime" = "" ]]; then
		# Masukkan konfigurasi bawaan pengulangan setiap 8 detik
		uci set "kopijahe.@autologin[$multiautologinnum].sleeptime=8"
		# Simpan konfigurasi
		uci commit kopijahe
		# Tentukan variabel sleeptime ke 8 detik
		sleeptime="8"
	fi
}

testing() {
	advancedmode="true"
	generaterandomid
	versi
	
	openwrtversion="$(grep VERSION_ID /etc/os-release | awk -F'[=]' '{print $2}' | awk -F'["]' '{print $2}')"
	systemmodel="$(grep "machine" /proc/cpuinfo | awk -F'[:]' '{print $2}' | cut -c2-)"
	# shellcheck disable=2009
	pskopijahe="$(ps | grep -c "kopijahe")"
	numkopijahe="$((pskopijahe-3))"
	
	echo "Pengaturan autologin:"
	echo ""
	uci show kopijahe
	echo ""
	echo "Versi aplikasi: $ver"
	echo "OpenWrt version: $openwrtversion"
	echo "Device model: $systemmodel"
	echo "Random ID: $randomid"
	echo "Jumlah autologin berjalan: $numkopijahe"
	
	if [[ "$reportmode" = "true" ]]; then
		echo ""
		echo "=========="
		echo "/etc/rc.local:"
		cat /etc/rc.local
		echo ""
		echo "=========="
		echo "Hostnames:"
		uci show dhcp | grep "@domain"
		echo ""
		echo "=========="
		echo "System log:"
		logread | grep kopijahe
	fi
}

cpctesting() {
	# Mode testing penyedia jasa cek koneksi
	cpcretry="1"
	cpctimeout="1"
	
	echo "Tes penyedia jasa layanan cek koneksi"
	cpcprovider="kopijahe"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="kopijahe2"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="firefox"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="google"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="google2"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="apple"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="apple2"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="microsoft"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="microsoft2"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="xiaomi"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="httpforever"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="neverssl"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="ubuntu"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="archlinux"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
	cpcprovider="examplecom"
	captiveportalcheck
	echo "$cpcprovider: $cpcstatus"
}

captiveportalcheck() {
	# Fungsi cek captive portal (halaman login)
	
	# Daftar IP server DNS publik (untuk pengecekan cadangan menggunakan ping jika gagal mengecek menggunakan curl)
	dnsgoogle='8.8.8.8'
	dnsgoogle2='8.8.4.4'
	dnsopendns='208.67.222.222'
	dnsopendns2='208.67.220.220'
	dnsquad9='9.9.9.9'
	
	# Cek apakah dalam mode testing atau tidak
	if [[ "$advancedmode" != "true" ]]; then
		# Tentukan penyedia layanan cek captive portal berdasarkan konfigurasi sebelumnya
		cpcprovider="$(uci -q get kopijahe.@autologin["$multiautologinnum"].cpcprovider)"
		# Jumlah percobaan ulang cek captive portal
		cpcretry="$(uci -q get kopijahe.@autologin["$multiautologinnum"].cpcretry)"
		# Lama timeout cek captive portal
		cpctimeout="$(uci -q get kopijahe.@autologin["$multiautologinnum"].cpctimeout)"
		# Penggunaan ping dalam cek koneksi
		cpcuseping="$(uci -q get kopijahe.@autologin["$multiautologinnum"].cpcuseping)"
		# Tentukan perintah yang digunakan
	else
		# Catat waktu sebelum melakukan pengetesan
		cpctestbefore="$(awk '{print $1}' < /proc/uptime)"
	fi
	
	# Jika konfigurasi penyedia jasa cek koneksi tidak ditemukan, maka:
	if [[ "$cpcprovider" = "" ]]; then
		# Masukkan konfigurasi penyedia layanan KopiJahe sebagai penyedia layanan bawaan
		uci set "kopijahe.@autologin[$multiautologinnum].cpcprovider=kopijahe"
		# Simpan konfigurasi
		uci commit kopijahe
		# Tentukan variabel cpcprovider ke kopijahe
		cpcprovider="kopijahe"
	fi
	
	#	Jika konfigurasi jumlah pengulangan tidak ditemukan, maka:
	if [[ "$cpcretry" = "" ]]; then
		# Masukkan konfigurasi bawaan percobaan ulang ke 2 kali
		uci set "kopijahe.@autologin[$multiautologinnum].cpcretry=2"
		# Simpan konfigurasi
		uci commit kopijahe
		# Tentukan variabel cpcretry ke 2 kali
		cpcretry="2"
	fi
	
	# Jika konfigurasi timeout percobaan tidak ditemukan, maka:
	if [[ "$cpctimeout" = "" ]]; then
		# Masukkan konfigurasi bawaan timeout ke 3 detik
		uci set "kopijahe.@autologin[$multiautologinnum].cpctimeout=3"
		# Simpan konfigurasi
		uci commit kopijahe
		# Tentukan variabel cpcretry ke 3 detik
		cpctimeout="3"
	fi
	
	# Jika konfigurasi penggunaan ping dalam cek koneksi tidak ditemukan, maka:
	if [[ "$cpcuseping" = "" ]]; then
		# Masukkan konfigurasi bawaan penggunaan ping ke "true"
		uci set "kopijahe.@autologin[$multiautologinnum].cpcuseping=true"
		# Simpan konfigurasi
		uci commit kopijahe
		# Tentukan variabel cpcuseping ke "true"
		cpcuseping="true"
	fi
	
	# Daftar penyedia layanan cek captive portal beserta hasil cek yang diharapkan
	# 
	case "$cpcprovider" in
		"kopijahe")
			# Layanan cek captive portal bawaan script
			cekkoneksi="$(curl --interface "$wandevice" -L --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://periksakoneksi.kopijahe.my.id/cek")"
			kodestatuslanding="$?"
			hasil="OK"
			dnsserver="$dnsopendns"
			;;
		"kopijahe2")
			# Layanan cek captive portal alternatif bawaan script
			cekkoneksi="$(curl --interface "$wandevice" -L --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://kopijahe.my.id/ok.txt")"
			kodestatuslanding="$?"
			hasil="OK"
			dnsserver="$dnsopendns2"
			;;
		"firefox")
			# Layanan cek captive portal bawaan browser Mozilla Firefox
			cekkoneksi="$(curl --interface "$wandevice" -L --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://detectportal.firefox.com/success.txt")"
			kodestatuslanding="$?"
			hasil="success"
			dnsserver="$dnsopendns2"
			;;
		"google")
			# Layanan cek captive portal bawaan sistem operasi android
			cekkoneksi="$(curl --interface "$wandevice" -LI --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://connectivitycheck.gstatic.com/generate_204" | grep -o "204")"
			kodestatuslanding="$?"
			hasil="204"
			dnsserver="$dnsgoogle"
			;;
		"google2")
			# Layanan cek captive portal bawaan Chrome
			cekkoneksi="$(curl --interface "$wandevice" -LI --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://clients3.google.com/generate_204" | grep -o "204")"
			kodestatuslanding="$?"
			hasil="204"
			dnsserver="$dnsgoogle2"
			;;
		"apple")
			# Layanan cek captive portal bawaan perangkat Apple
			cekkoneksi="$(curl --interface "$wandevice" -L --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://captive.apple.com/" | grep -o "Success" | head -c8)"
			kodestatuslanding="$?"
			hasil="Success"
			dnsserver="$dnsopendns"
			;;
		"apple2")
			# Layanan cek captive portal alternatif bawaan perangkat Apple
			cekkoneksi="$(curl --interface "$wandevice" -L --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://www.apple.com/library/test/success.html" | grep -o "Success" | head -c8)"
			kodestatuslanding="$?"
			hasil="Success"
			dnsserver="$dnsopendns2"
			;;
		"microsoft")
			# Layanan cek captive portal bawaan sistem operasi Windows
			cekkoneksi="$(curl --interface "$wandevice" -L --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://www.msftconnecttest.com/connecttest.txt")"
			kodestatuslanding="$?"
			hasil="Microsoft Connect Test"
			dnsserver="$dnsquad9"
			;;
		"microsoft2")
			# Layanan cek captive portal alternatif bawaan sistem operasi Windows
			cekkoneksi="$(curl --interface "$wandevice" -L --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://www.msftncsi.com/ncsi.txt")"
			kodestatuslanding="$?"
			hasil="Microsoft NCSI"
			dnsserver="$dnsopendns"
			;;
		"xiaomi")
			# Layanan cek captive portal bawaan sistem operasi MIUI
			cekkoneksi="$(curl --interface "$wandevice" -LI --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://connect.rom.miui.com/generate_204" | grep -o "204")"
			kodestatuslanding="$?"
			hasil="204"
			dnsserver="$dnsquad9"
			;;
		"httpforever")
			# Layanan cek captive portal dari Scott Helme (https://github.com/ScottHelme)
			cekkoneksi="$(curl --interface "$wandevice" --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://httpforever.com/" | grep -o "A reliably insecure connection")"
			kodestatuslanding="$?"
			hasil="A reliably insecure connection"
			dnsserver="$dnsgoogle"
			;;
		"neverssl")
			# Layanan cek captive portal dari Colm MacCárthaigh (https://github.com/colmmacc/neverssl.com)
			cekkoneksi="$(curl --interface "$wandevice" --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://neverssl.com/" | grep -o "helping you get online")"
			kodestatuslanding="$?"
			hasil="helping you get online"
			dnsserver="$dnsopendns"
			;;
		"ubuntu")
			# Layanan cek captive portal bawaan sistem operasi ubuntu
			cekkoneksi="$(curl --interface "$wandevice" -LI --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://connectivity-check.ubuntu.com" | grep -o "204")"
			kodestatuslanding="$?"
			hasil="204"
			dnsserver="$dnsgoogle"
			;;
		"archlinux")
			# Layanan cek captive portal bawaan sistem operasi archlinux
			cekkoneksi="$(curl --interface "$wandevice" -LI --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://ping.archlinux.org" | grep -o "200")"
			kodestatuslanding="$?"
			hasil="200"
			dnsserver="$dnsquad9"
			;;
		"examplecom")
			# Situs percobaan yang dikelola oleh IANA (https://www.iana.org/domains/reserved)
			cekkoneksi="$(curl --interface "$wandevice" -L --silent --retry "$cpcretry" --max-redirs 1 --connect-timeout "$cpctimeout" "http://example.com/" | grep -o "Example Domain" | awk '!a[$0]++')"
			kodestatuslanding="$?"
			hasil="Example Domain"
			dnsserver="$dnsquad9"
			;;
	esac

	# Cek apakah dalam mode testing atau tidak
	if [[ "$advancedmode" = "true" ]]; then
		# Hitung berapa lama waktu yang dibutuhkan untuk pengecekan
		cpctestafter="$(awk '{print $1}' < /proc/uptime)"
		cpctestelapsed="$(awk 'BEGIN {print "'"$cpctestafter"'"-"'"$cpctestbefore"'"}')"
	fi
	
	# Jika hasil cek koneksi sesuai dengan hasil yang diharapkan, maka:
	if [[ "$cekkoneksi" = "$hasil" ]] && [[ "$advancedmode" != "true" ]]; then
		# Tentukan bahwa terkoneksi dengan internet
		internetconnected="yes"
		cpcstatus="Sukses"
	elif [[ "$cekkoneksi" = "$hasil" ]] && [[ "$advancedmode" = "true" ]]; then
		# Tentukan bahwa terkoneksi dengan internet dan tulis waktu yang diperlukan untuk mengecek koneksi
		internetconnected="yes"
		cpcstatus="Sukses ($cpctestelapsed detik)"
	# Jika hasilnya tidak sama dan bukan mode tes penyedia jasa koneksi, maka:
	elif [[ "$cekkoneksi" != "$hasil" ]] && [[ "$advancedmode" != "true" ]] && [[ "$cpcuseping" = "true" ]]; then
		# Lakukan cek menggunakan ping terlebih dahulu ke dns server sesuai pilihan penyedia captive portal
		cekkoneksiping="$(ping -I "$wandevice" -c "$cpcretry" "$dnsserver")"
		cekkoneksiping="$?"
		# Jika ping berhasil, maka:
		if [[ "$cekkoneksiping" = "0" ]]; then
			# Tentukan bahwa terkoneksi dengan internet
			internetconnected="yes"
			cpcstatus="Sukses"
		else
			# Tentukan bahwa tidak terkoneksi dengan internet
			internetconnected="no"
			cpcstatus="Gagal"
		fi
	# Jika hasilnya tidak sama dan dalam mode tes penyedia jasa koneksi, maka:
	elif [[ "$cekkoneksi" != "$hasil" ]] && [[ "$advancedmode" = "true" ]]; then
		# Tentukan bahwa tidak terkoneksi dengan internet dan tulis waktu yang diperlukan untuk mengecek koneksi
		internetconnected="no"
		cpcstatus="Gagal ($cpctestelapsed detik)"
	else
		# Tentukan bahwa tidak terkoneksi dengan internet
		internetconnected="no"
		cpcstatus="Gagal"
	fi

	# Jika kode status hasil cek koneksi adalah 127, maka:
	if [[ "$kodestatuslanding" = "127" ]]; then
		# Beritahu pengguna bahwa CURL belum terpasang
		echo "CURL belum terpasang" | logger -t "kopijahe $ver"
		# Jika perangkat dalam keadaan terkoneksi ke internet, maka:
		if [[ "$(ifstatus "$wandevice" | jsonfilter -e '@["up"]')" = "true" ]]; then
			# Lakukan pembaruan daftar aplikasi
			opkg update
			# Lalu unduh dan instal CURL
			opkg install curl
		fi
	fi
}

curl_statuscodes() {
	# Penjelasan beberapa kode status cURL
	# Dan penyebab biasanya
	
	case "$kodestatus" in
		1)
			# Biasanya karena protokol https tidak diaktifkan oleh libcurl yang terpasang
			curl_status="Protokol koneksi tidak didukung oleh cURL yang terpasang"
			;;
		3)
			# Biasanya karena deteksi URL otomatis tidak berhasil
			curl_status="Pengaturan belum lengkap, silahkan ulangi konfigurasi"
			;;
		6)
			# Biasanya karena hostname belum diisi
			curl_status="Alamat server tidak diketahui"
			;;
		7)
			# Biasanya karena hostname keliru, atau pengaturan mwan3 kurang tepat
			curl_status="Server tidak dapat dihubungi"
			;;
		28)
			# Biasanya karena koneksi bengong, atau belum mendapatkan IP
			curl_status="Koneksi ke server mengalami timeout"
			;;
		35)
			# Biasanya karena tanggal dan jam tidak sesuai
			curl_status="Koneksi SSL/HTTPS ke server mengalami error"
			;;
		*)
			curl_status="Kode status tidak dikenali"
			;;
	esac
}

curl_additionalparameter() {
	# Cek versi OS, jika tidak menggunakan OpenWrt 22.03
	# Maka perlu menggunakan tambahan parameter -k
	if [[ "$osversion" != "22" ]]; then
		curladditionalparameter="-k"
	fi
}

login_folder() {
	# Fungsi penentuan folder dan url login
	
	case "$(uci -q get kopijahe.@autologin["$multiautologinnum"].tipelogin)" in
		"login")
			# Jika tipelogin wifi.id, maka:
			loginurl="$(echo "$wp" | grep urlx | awk -F'[=]' '{print $2}' | awk -F'[?]' '{print $1}' | sed s/\'//g | sed s/\ //g | head -n 1)"
			if [[ "$loginurl" = "https://$server_id/" ]] || [[ "$loginurl" = "" ]]; then
				loginurl="https://$server_id/authnew/login/check_login.php"
			fi
			;;
		"wms")
			# Jika tipelogin wms, maka:
			if [[ "$(uci -q get kopijahe.@autologin["$multiautologinnum"].wifivariant)" = "wms-lanjutkan" ]]; then
				# Cek apakah di varian wms-lanjutkan, jika iya, maka:
				# Tentukan URL login yang sesuai
				loginurl="https://$server_id/wms/auth/authnew/autologin-free/quarantine.php"
			elif [[ "$(uci -q get kopijahe.@autologin["$multiautologinnum"].wifivariant)" = "wifi.id-lanjutkan" ]] || [[ "$(uci -q get kopijahe.@autologin["$multiautologinnum"].wifivariant)" = "pegadaian" ]]; then
				# Jika digunakan di varian wifi.id-lanjutkan atau pegadaian, maka:
				# Tentukan URL login yang sesuai
				loginurl="https://$server_id/authnew/login-free/check_login.php"
			else
				# Jika digunakan di varian jaringan wms dan wms lite, maka:
				# Tentukan wms_url
				wms_url="$(echo "$wp" | grep url | awk -F'[:]' '{print $2}' | awk -F'[?]' '{print $1}' | sed s/\'//g | sed s/\ //g | head -n 1)"
				# Tentukan URL login yang sesuai dengan hasil dari wms_url
				loginurl="https://$server_id/$tipelogin/$wms_url"
				if [[ "$loginurl" = "https://$server_id/$tipelogin/" ]] || [[ "$loginurl" = "" ]] || [[ "$wms_url" = "" ]] || [[ "$wms_url" = "//welcome2.wifi.id/wms/" ]]; then
					# Jika gagal dalam mendapatkan URL login yang sesuai, maka:
					# Gunakan URL login  di bawah:
					loginurl="https://$server_id/$tipelogin/auth/authnew/autologin/quarantine.php"
				fi
			fi
			;;
		*)
			# Jika tipe login tidak diketahui, maka kemungkinan konfigurasi masih belum lengkap, silahkan ulangi deteksi otomatis jaringan
			echo "Ada kesalahan konfigurasi jaringan"
			;;
	esac
}

wplanjutkan() {
	# Fungsi mencari username dan password untuk sistem "lanjutkan"
	
	# Cari username
	if [[ "$wifivariant" = "wms-lanjutkan" ]] || [[ "$wifivariant" = "pegadaian" ]] || [[ "$wifivariant" = "wifi.id-lanjutkan" ]]; then
		username2="$(echo "$wp" | grep username | grep username | awk -F'[=]' '{print $2}' | awk -F '[&]' '{print $1}')"
	else
		username2="pass-$clientmac@wms.00000000.000"
	fi
	
	# Cari password
	password_lanjutkan="$(echo "$wp" | grep username | grep username | awk -F'[=]' '{print $3}' | awk -F '[&]' '{print $1}' | sed s/\'//g | sed s/\,//g)"
}

wificommunity() {
	# Tentukan akhiran username sesuai dengan varian jaringan yang dipilih:
	#
	case "$wifivariant" in
		"smartbisnis")
			# Jika smartbisnis, maka:
			username2="$username@com.smartbisnis"
			;;
		"kampus")
			# Jika kampus, maka:
			# Hindari error jika penulisan akun kampus tidak ditulis NIM saja
			username="$(echo "$username" | awk -F'[@]' '{print $1}')"
			# Tentukan akhiran username sesuai dengan konfigurasi kampus yang tersimpan
			cfgkampus="$(uci -q get kopijahe.@autologin["$multiautologinnum"].kampus)"
			case "$cfgkampus" in
				"ut.ac.id")
					# Akun UT punya format berbeda dibandingkan dengan kampus lainnya
					kampus="$(echo "$cfgkampus" | awk -F'[.]' '{print $1}')"
					username2="$username@$cfgkampus@com.$kampus"
					;;
				"adibuana")
					# Akun Adibuana mengikuti format komunitas generik
					username2="$username@$cfgkampus.vmgmt@wms.00000000.000"
					;;
				*)
					# Selain itu, gunakan format standard
					# Termasuk akun kampus dengan akhiran: "@itdel", "@polije", "@umaha", "@unej", "@unsiq"
					username2="$username@com.$cfgkampus"
					;;
			esac
			;;
		"wms-lite" | "wmslite")
			# Jika WMS Lite, maka:
			generaterandomid
			# Cek apakah tipe login wmslite baru
			wmsid="$(uci -q get kopijahe.@autologin["$multiautologinnum"].wmsid)"
			if [[ "$tipelogin" = "wmslite" ]]; then
				# Jika iya, maka:
				# Tentukan akhiran username login untuk jaringan WMS Lite baru
				username3="@wmslite.$wmsid.000"
			else
				# Jika tipe lama, maka:
				# Tentukan akhiran username login untuk jaringan WMS Lite lama
				username3="@wmslite.$wmsid"
			fi
			;;
		"wms")
			# Jika WMS, maka:
			generaterandomid
			# Tentukan akhiran username login untuk jaringan WMS
			wmsid="$(uci -q get kopijahe.@autologin["$multiautologinnum"].wmsid)"
			username3="@wms.$wmsid.000"
			;;
		"wico")
			# Jika WICO 2.0, maka:
			username2="$username@violet"
			;;
		"wifi.id" | "@wifi.id" | "wifiid")
			# Jika wifi.id, maka:
			# Periksa apakah akun yang digunakan adalah akun violet*/giga.wigo/boingo/sooltan.id, jika iya, maka:
			if [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "violet" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "violet.unp" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "violet.unm" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "violet.ugm" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "violet.unpatti" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "violet.uho" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "violet.gamer" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "giga.wigo" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "mb.boingo.com" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "boingo.com" ]] ||  [[ "$(echo "$username" | awk -F'[@]' '{print $2}')" = "sooltan.id" ]]; then
				# Tidak perlu diberi tambahan akhiran
				username2="$username"
			else
				# Jika tidak, maka:
				# Beri tambahan akhiran "@spin2"
				username2="$username@spin2"
			fi
			;;
		"grosirbersama")
			# Jika grosirbersama, maka:
			username2="$username@com.grosirbersama"
			;;
		"internetku")
			# Jika internetku, maka:
			username2="$username@com.internetku"
			;;
		"gift")
			# Jika gift, maka:
			username2="$username@gift"
			;;
		"homewifi")
			# Jika homewifi, maka:
			username2="$username"
			;;
		"starwifi")
			# Jika starwifi, maka:
			username2="$username.starwifi@event"
			;;
		"sso" | "rumah-sakit" | "komunitas-generik")
			# Jika SSO atau Rumah Sakit atau komunitas generik lainnya, maka:
			username2="$username.vmgmt@wms.00000000.000"
			;;
		"wms-lanjutkan" | "wifi.id-lanjutkan" | "pegadaian")
			# Jika "lanjutkan", maka:
			# Jalankan fungsi wplanjutkan untuk mencari nilai username dan password
			wplanjutkan
			;;
	esac
}

dataraw() {
	# Fungsi untuk menyesuaikan format identitas login berdasarkan hasil dari fungsi wificommunity di atas
	
	case "$(uci -q get kopijahe.@autologin["$multiautologinnum"].wifivariant)" in
	"wms" | "wms-lite")
		# Jika digunakan untuk jaringan WMS atau WMS Lite, maka:
		login_cred="username_=""$username2""&autologin_time=86000&username=""$username"".""$randomid""$username3""&password=""$password"""
		;;
	"wico")
		# Jika digunakan untuk jaringan WICO, maka:
		login_cred="username_=""$username""&username=""$username2""&password=""$password"""
		;;
	"wms-lanjutkan" | "wifi.id-lanjutkan" | "pegadaian")
		# Jika digunakan untuk jaringan "lanjutkan", maka:
		login_cred="username=""$username2""&password=""$password_lanjutkan""&autologin_time="
		;;
	*)
		# Jika digunakan untuk jaringan lain, maka:
		login_cred="username=""$username2""&password=""$password"""
		;;
	esac
}

loadwelcomepage() {
	# Fungsi memuat welcome page
	
	# Tentukan url welcome page
	urllanding="https://""$server_id""/""$tipelogin""/?gw_id=""$gwid""&client_mac=""$clientmac""&wlan=""$wlanid""&sessionid=""$session_id"""
	# Unduh halaman welcome page
	wp="$(curl --resolve "welcome2.wifi.id:443:10.233.16.32,10.233.16.13" --resolve "welcome3.wifi.id:443:118.98.34.148" --silent --interface "$wandevice" --retry 1 --connect-timeout 10 "$curladditionalparameter" "$urllanding")"
	
	# Jika digunakan di jaringan WMS
	if [[ "$wifivariant" = "wms" ]] || [[ "$wifivariant" = "wms-lite" ]] || [[ "$wifivariant" = "wms-lanjutkan" ]]; then
		# Maka  kosongi nilai "loadwp"
		loadwp_value=""
	else
		# Jika tidak, maka:
		# Cari dan kalkulasi nilai parameter "load_wp"
		loadwp_value="$(echo "$wp" | grep load_time | awk -F'[=]' '{print $2}' | sed s/\'//g | sed s/\"//g | head -n 1 | awk -F '[*]' '{print $1*10000}')"
		loadwp_token="$(echo "$wp" | grep token_wp_login | awk -F'[=]' '{print $4}' | sed s/\"//g | sed s/\>//g | head -n 1)"
	fi
}

hasil_loginout() {
	# Fungsi output hasil login dan logout

	# Filter hasil hanya di bagian yang relevan saja sesuai dengan fungsi yang digunakan
	if [[ "$function" = "login" ]]; then
		loginout="$(echo "$attempt" | jsonfilter -e '@["message"]' 2> /dev/null)"
	elif [[ "$function" = "logout" ]]; then
		loginout="$(echo "$attempt" | awk -F'[<>]' '{print $5}' 2> /dev/null)"
	fi

	# Deteksi error "Radius Timeout.", karena perlu pengolahan lebih lanjut:
	if [[ "$loginout" = "" ]] && [[ "$kodestatus" = "0" ]]; then
		loginout="$(echo "$attempt" | awk 'END{print}' | jsonfilter -e '@["message"]' 2> /dev/null)"
	fi

	# Jika variabel hasil kosong, maka login tidak berhasil
	# Cek apakah mode bypass (parameter -z) hidup, jika tidak, maka:
	if [[ "$loginout" = "" ]] && [[ "$bypassmode" = "" ]]; then
		# Laporkan hasil login tidak berhasil, berikut kode status CURL untuk halaman login/landing dan percobaan login
		loginout="$function tidak berhasil, kode status CURL: $kodestatuslanding & $kodestatus"
	elif [[ "$loginout" = "" ]] && [[ "$bypassmode" = "true" ]]; then
		# Laporkan hasil login tidak berhasil, berikut kode status CURL untuk percobaan login
		loginout="$function tidak berhasil, kode status CURL: $kodestatus"
	fi
	
	# Jika digunakan di mode lanjutan, maka:
	if [[ "$advancedmode" = "true" ]]; then
		# Beritahu pengguna melalui layar terminal/stdout
		echo "Percobaan $function. Interface: $waninterface. Hasil: $loginout"
		# Simpan juga hasilnya di berkas "/tmp/last.login.$waninterface" dan beritahu pengguna melalui System Log
		echo "Percobaan $function. Interface: $waninterface. Hasil: $loginout" | tee -a "/tmp/last.login.$waninterface" | logger -t "kopijahe $ver"
	# Jika tidak, maka:
	else
		# Simpan hasilnya di berkas "/tmp/last.login.$waninterface" dan beritahu pengguna melalui System Log
		echo "Percobaan $function. Interface: $waninterface. Hasil: $loginout" | tee -a "/tmp/last.login.$waninterface" | logger -t "kopijahe $ver"
	fi
	
	# Jika kode status hasil login tidak berhasil (bukan 0), maka:
	if [[ "$function" = "login" ]] && [[ "$kodestatus" != "0" ]]; then
		# Muat penjelasan kode cURL
		curl_statuscodes
		# Beritahu pengguna bahwa lewat stdout dan System log jika melalui mode lanjutan
		if [[ "$advancedmode" = "true" ]]; then
			echo "$curl_status"
			echo "$curl_status" | logger -t "kopijahe $ver"
		# Jika tidak, maka beritahu pengguna lewat System Log saja
		else
			echo "$curl_status" | logger -t "kopijahe $ver"
		fi
	fi
}

logout_wifi() {
	# Fungsi login dari pengaturan yang disimpan
	
	# Simpan jam dan tanggal saat ini
	date > "/tmp/last.login.$waninterface"
	
	server_id="$(uci -q get kopijahe.@autologin["$multiautologinnum"].serverid)"
	versi
	curl_additionalparameter
	
	# Lakukan logout sesuai dengan parameter konfigurasi autologin
	attempt="$(curl --resolve "welcome2.wifi.id:443:10.233.16.32,10.233.16.13" --resolve "welcome3.wifi.id:443:118.98.34.148" --silent --interface "$wandevice" "$curladditionalparameter" """https://$server_id/authnew/logout/logoutx.php""" \
	-H "accept: application/json, text/javascript, */*; q=0.01" \
	-H "accept-language: en-US,en;q=0.9,id;q=0.8" \
	-H "connection: keep-alive" \
	-H "content-type: application/x-www-form-urlencoded; charset=UTF-8" \
	-H "origin: https://logout.wifi.id" \
	-H "sec-fetch-dest: empty" \
	-H "sec-fetch-mode: cors" \
	-H "sec-fetch-site: same-origin" \
	-H "user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36" \
	-H "x-requested-with: XMLHttpRequest" \
	-H 'sec-ch-ua: "Not_A Brand";v="99", "Google Chrome";v="109", "Chromium";v="109"' \
	-H "sec-ch-ua-mobile: ?0" \
	-H "sec-ch-ua-platform: Windows" \
	-H "referer: https://logout.wifi.id/")"
	
	kodestatus="$?"
	function="logout"
	hasil_loginout
}

login_wifi() {
	# Fungsi login dari pengaturan yang disimpan
	
	# Simpan jam dan tanggal saat ini
	date > "/tmp/last.login.$waninterface"
	
	randommaccheck
	versi
	username="$(uci -q get kopijahe.@autologin["$multiautologinnum"].username)"
	username2="$(echo "$username" | awk -F'[@]' '{print $1}')"
	password="$(uci -q get kopijahe.@autologin["$multiautologinnum"].password)"
	tipelogin="$(uci -q get kopijahe.@autologin["$multiautologinnum"].tipelogin)"
	gwid="$(uci -q get kopijahe.@autologin["$multiautologinnum"].gwid)"
	wlanid="$(uci -q get kopijahe.@autologin["$multiautologinnum"].wlanid)"
	session_id="$(uci -q get kopijahe.@autologin["$multiautologinnum"].sessionid)"
	wifivariant="$(uci -q get kopijahe.@autologin["$multiautologinnum"].wifivariant)"
	server_id="$(uci -q get kopijahe.@autologin["$multiautologinnum"].serverid)"
	loadwelcomepage
	login_folder
	wificommunity
	dataraw
	curl_additionalparameter
	
	# Lakukan login sesuai dengan parameter konfigurasi autologin
	if [[ "$loginfromfile" != "true" ]]; then
		attempt="$(curl --resolve "welcome2.wifi.id:443:10.233.16.32,10.233.16.13" --resolve "welcome3.wifi.id:443:118.98.34.148" --silent --interface "$wandevice" "$curladditionalparameter" """$loginurl""?ipc=""$iprouter""&gw_id=""$gwid""&client_mac=""$clientmac""&redirect=&wlan=""$wlanid""&load_wp=""$loadwp_value""" \
		-H "accept: application/json, text/javascript, */*; q=0.01" \
		-H "accept-language: en-US,en;q=0.9,id;q=0.8" \
		-H "connection: keep-alive" \
		-H "content-type: application/x-www-form-urlencoded; charset=UTF-8" \
		-H "origin: ""$server_id""" \
		-H "referer: $loginurl?ipc=$iprouter&gw_id=$gwid&client_mac=$clientmac&redirect=&wlan=$wlanid&load_wp=$loadwp_value" \
		-H "sec-fetch-dest: empty" \
		-H "sec-fetch-mode: cors" \
		-H "sec-fetch-site: same-origin" \
		-H "user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36" \
		-H "x-requested-with: XMLHttpRequest" \
		-H 'sec-ch-ua: "Not_A Brand";v="8", "Google Chrome";v="117", "Chromium";v="117"' \
		-H "origin: https://""$server_id""" \
		-H "sec-ch-ua-mobile: ?0" \
		-H "sec-ch-ua-platform: Windows" \
		-H "Cookie: csrf_token_wp=""$loadwp_token""" \
		-H "referer: https://""$server_id""/""$tipelogin""/?gw_id=""$gwid""&client_mac=""$clientmac""&wlan=""$wlanid""&sessionid=""$session_id""" \
		--data-raw "$login_cred")"
	else
		# Tentukan lokasi berkas login
		loginwifi="/tmp/login.$waninterface"
		# Gandakan berkas tangkapan login CURL ke tempat proses
		cp "$loginfiletxt" "$loginwifi"
		# Cek versi OS, jika tidak menggunakan OpenWrt 22.03
		# Maka perlu menggunakan tambahan parameter -k
		if [[ "$osversion" != "22" ]]; then
			sed -i "s/curl/curl -k --silent --interface $wandevice/g" "$loginwifi"
		else
			sed -i "s/curl/curl --silent --interface $wandevice/g" "$loginwifi"
		fi
		sed -i "s/iprouter/$iprouter/g" "$loginwifi"
		sed -i "s/kopijahe/$randomid/g" "$loginwifi"
		# Beri izin eksekusi berkas autologin
		chmod +x "$loginwifi"
		attempt="$(eval "$loginwifi")"
	fi
	
	kodestatus="$?"
	function="login"
	hasil_loginout
}

seamless_reconnect() {
	# Fungsi mode reconnect seamless
	advancedmode="true"
	seamlessreconnectmode="true"
	randomhostnamecount=0
	
	while [[ "$seamlessreconnectmode" = "true" ]]; do
	multiautologin
	detectwan
	captiveportalcheck
	deviceclaimfailed
	sleeptimer
	
	# Jika hasil cek koneksi internet tidak berhasil, maka:
	if [[ "$internetconnected" = "no" ]]; then
		# Catat jam dan tanggal saat ini di berkas "/tmp/last.login.$waninterface"
		date > "/tmp/last.login.$waninterface"
		# Catat status koneksi terakhir di berkas "/tmp/last.login.$waninterface"
		echo "Status koneksi terakhir:" >> "/tmp/last.login.$waninterface"
		# Cek apakah sebelumnya belum pernah mencoba hostname baru lebih dari 5 kali (dihitung dari 0)
		if [[ "$randomhostnamecount" -lt 4 ]]; then
			# Jika belum, maka:
			randomhostnamecount2="$((randomhostnamecount+1))"
			# Beritahu pengguna bahwa koneksi dengan internet terputus
			echo "Koneksi seamless di $waninterface terputus, mencoba hostname baru ke-$randomhostnamecount2" | tee -a "/tmp/last.login.$waninterface" | logger -t "kopijahe $ver"
			# Ganti hostname secara acak
			generaterandomhostname
			randomhostnamecount="$((randomhostnamecount+1))"
		else
			# Jika sudah pernah, maka:
			# Beritahu pengguna bahwa koneksi dengan internet terputus
			echo "Koneksi seamless di $waninterface terputus, sudah mencoba $randomhostnamecount hostname, meminta alamat IP baru" | tee -a "/tmp/last.login.$waninterface" | logger -t "kopijahe $ver"
			# Minta penggantian alamat IP
			releaseobtainnewip
			# Ulangi penghitungan randomhostname, supaya pengecekan berjalan normal
			randomhostnamecount=0
		fi
		# Tambahan istirahat sebelum mengecek ulang
		# sambil menunggu koneksi hidup kembali
		sleep "$sleeptime"
	fi
	# Istirahat sebelum coba mengecek koneksi kembali
	sleep "$sleeptime"
	done
}

# Fungsi mendapatkan parameter aplikasi
while getopts :abc:df:hkil:m:op:rstu:v:w:xz flags
do
	case "${flags}" in
		a)
			multiautologin
			detectwan
			detecturl
			setup
			;;
		b)
			update
			;;
		c)
			icpcprovider="$OPTARG"
			advancedmode="true"
			multiautologin
			if [[ "$icpcprovider" = "kopijahe" ]] || [[ "$icpcprovider" = "kopijahe2" ]] || [[ "$icpcprovider" = "firefox" ]] || [[ "$icpcprovider" = "google" ]] || [[ "$icpcprovider" = "google2" ]] || [[ "$icpcprovider" = "apple" ]] || [[ "$icpcprovider" = "apple2" ]] || [[ "$icpcprovider" = "microsoft" ]] || [[ "$icpcprovider" = "microsoft2" ]] || [[ "$icpcprovider" = "xiaomi" ]] || [[ "$icpcprovider" = "httpforever" ]] || [[ "$icpcprovider" = "neverssl" ]] || [[ "$icpcprovider" = "ubuntu" ]] || [[ "$icpcprovider" = "archlinux" ]] || [[ "$icpcprovider" = "examplecom" ]]; then
				uci set kopijahe.@autologin["$multiautologinnum"].cpcprovider="$icpcprovider"
				uci commit kopijahe
			elif [[ "$icpcprovider" = "test" ]]; then
				detectwan
				cpctesting
				exit 0
			else
				echo "Penyedia layanan yang didukung:"
				echo "\"kopijahe\" (default), \"kopijahe2\", \"firefox\", \"google\", \"google2\", \"apple\", \"apple2\", \"microsoft\", \"microsoft2\", \"xiaomi\", \"httpforever\", \"neverssl\", \"ubuntu\", \"archlinux\", \"examplecom\""
				echo ""
				echo "Untuk menguji penyedia layanan yang bisa dipakai, bisa menggunakan -c test"
				exit 1
			fi
			;;
		d)
			multiautologin
			detectwan
			echo "Silahkan masukkan URL halaman landing:"
			read -r "urllanding"
			deteksi=" Location: $urllanding"
			setup
			;;
		f)
			loginfiletxt="$OPTARG"
			loginfromfile="true"
			;;
		h)
			bantuan
			;;
		i)
			install
			;;
		k)
			killkopijahe
			;;
		l)
			loadbalance="$OPTARG"
			advancedmode="true"
			multiautologin
			if [[ "$loadbalance" = "yes" ]] || [[ "$loadbalance" = "no" ]]; then
				uci set kopijahe.@autologin["$multiautologinnum"].loadbalance="$loadbalance"
				uci commit kopijahe
			else
				echo "hanya menerima jawaban 'yes' atau 'no'"
				exit 1
			fi
			if [[ "$loadbalance" = "yes" ]]; then
				echo "Silahkan tentukan interface yang digunakan (misal: wwan, wwan1):"
				read -r "lbinterface"
				waninterface="$(echo "$lbinterface" | tr -dc "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_")"
				uci set kopijahe.@autologin["$multiautologinnum"].waninterface="$waninterface"
				uci commit kopijahe
			fi
			;;
		m)
			inputmultiautologin="$OPTARG"
			;;
		o)
			advancedmode="true"
			bypassmode="true"
			multiautologin
			detectwan
			logout_wifi
			;;
		p)
			password="$OPTARG"
			advancedmode="true"
			multiautologin
			# Hindari error karena pengguna menuliskan simbol "<" dan ">"
			password="$(echo "$password" | sed 's/<//g' | sed 's/>//g')"
			uci set kopijahe.@autologin["$multiautologinnum"].password="$password"
			uci commit kopijahe
			;;
		r)
			reportmode="true"
			testing
			;;
		s)
			seamless_reconnect
			;;
		t)
			testing
			;;
		u)
			username="$OPTARG"
			advancedmode="true"
			multiautologin
			# Hindari error karena pengguna menuliskan simbol "<" dan ">"
			username="$(echo "$username" | sed 's/<//g' | sed 's/>//g')"
			uci set kopijahe.@autologin["$multiautologinnum"].username="$username"
			uci commit kopijahe
			;;
		v)
			wifivariant="$OPTARG"
			advancedmode="true"
			multiautologin
			if [[ "$wifivariant" = "wifi.id" ]] || [[ "$wifivariant" = "wifi.id-lanjutkan" ]] || [[ "$wifivariant" = "@wifi.id" ]] || [[ "$wifivariant" = "wms" ]] || [[ "$wifivariant" = "wms-lanjutkan" ]] || [[ "$wifivariant" = "wms-lite" ]] || [[ "$wifivariant" = "smartbisnis" ]] || [[ "$wifivariant" = "kampus" ]] || [[ "$wifivariant" = "sso" ]] || [[ "$wifivariant" = "rumah-sakit" ]] || [[ "$wifivariant" = "wico" ]] || [[ "$wifivariant" = "grosirbersama" ]] || [[ "$wifivariant" = "internetku" ]] || [[ "$wifivariant" = "gift" ]] || [[ "$wifivariant" = "starwifi" ]] || [[ "$wifivariant" = "komunitas-generik" ]] || [[ "$wifivariant" = "pegadaian" ]] || [[ "$wifivariant" = "homewifi" ]]; then
				uci set kopijahe.@autologin["$multiautologinnum"].wifivariant="$wifivariant"
			else
				echo "Varian jaringan yang didukung:"
				echo "\"wifi.id\", \"wifi.id-lanjutkan\", \"wms\", \"wms-lanjutkan\", \"wms-lite\", \"kampus\", \"smartbisnis\", \"sso\", \"rumah-sakit\", \"wico\", \"grosirbersama\", \"internetku\", \"gift\", \"starwifi\", \"komunitas-generik\", \"pegadaian\""
				exit 1
			fi
			if [[ "$wifivariant" = "kampus" ]]; then
				echo "Silahkan masukkan nama kampus anda (misal: \"ut.ac.id\", \"unsiq\", \"trisakti\", \"adibuana\")"
				read -r kampus
				kampus="$(echo "$kampus" | tr -dc "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.")"
				uci set kopijahe.@autologin["$multiautologinnum"].kampus="$kampus"
			fi
			uci commit kopijahe
			;;
		w)
			isleeptime="$OPTARG"
			sleeptime="$(echo "$isleeptime" | tr -dc "0123456789")"
			advancedmode="true"
			multiautologin
			uci set "kopijahe.@autologin[$multiautologinnum].sleeptime=$sleeptime"
			uci commit kopijahe
			;;
		x)
			set -x
			;;
		z)
			advancedmode="true"
			bypassmode="true"
			versi
			osversioncheck
			multiautologin
			detectwan
			login_wifi
			;;
		\?)
			bantuan
			;;
		:)
			echo "perintah tidak diketahui atau salah"
			exit 1
			;;
		*)
			;;
	esac
done

# Cek versi sistem operasi terlebih dahulu
osversioncheck
# Cek apakah perangkat tidak punya MAC tetap
detectrandommac="$(dmesg | grep 'generated random MAC address')"

# Fungsi autologin
# Deteksi apakah variabel advancedmode hidup, jika tidak, maka lakukan autologin:
while [[ "$advancedmode" = "" ]]; do
	# Cek nomor pengaturan terlebih dahulu
	multiautologin
	# Deteksi antarmuka jaringan yang dipakai
	detectwan
	# Cek kondisi antarmuka jaringan yang dipakai
	deviceclaimfailed
	# Deteksi status koneksi
	captiveportalcheck
	# Cek apakah login sebelumnya diblokir atau tidak
	loginblock
	# Cek pengaturan waktu pengulangan
	sleeptimer
	
	# Jika hasil cek koneksi internet tidak berhasil, maka:
	if [[ "$internetconnected" = "no" ]]; then
		# Cek dulu varian jaringan yang digunakan:
		wifivariant="$(uci -q get kopijahe.@autologin["$multiautologinnum"].wifivariant)"
		
		# Cek apakah IP diblokir,
		# Jika benar, maka:
		if [[ "$ipblocked" = "yes" ]]; then
			# Catat jam dan tanggal saat ini di berkas "/tmp/last.login.$waninterface"
			date > "/tmp/last.login.$waninterface"
			# Catat percobaan login terakhir di berkas "/tmp/last.login.$waninterface"
			echo "Percobaan login terakhir:" >> "/tmp/last.login.$waninterface"
			# Beritahu pengguna bahwa koneksi dengan internet terputus
			echo "Login di interface $waninterface diblokir, alasan: $loginout" | tee -a "/tmp/last.login.$waninterface" | logger -t "kopijahe $ver"
			# Logout terlebih dahulu supaya akun tidak tersangkut di server
			logout_wifi
			# Minta penggantian alamat IP
			releaseobtainnewip
			# Istirahat sebelum coba mengecek koneksi kembali
			sleep "$sleeptime"
		# Cek apakah login diblokir dan tidak menggunakan akun smartbisnis ataupun kampus,
		# Jika benar, maka:
		elif [[ "$loginblocked" = "yes" ]] && [[ "$wifivariant" != "smartbisnis" ]] && [[ "$wifivariant" != "kampus" ]]; then
			# Catat jam dan tanggal saat ini di berkas "/tmp/last.login.$waninterface"
			date > "/tmp/last.login.$waninterface"
			# Catat percobaan login terakhir di berkas "/tmp/last.login.$waninterface"
			echo "Percobaan login terakhir:" >> "/tmp/last.login.$waninterface"
			# Beritahu pengguna bahwa koneksi dengan internet terputus
			echo "Login di interface $waninterface diblokir, alasan: $loginout" | tee -a "/tmp/last.login.$waninterface" | logger -t "kopijahe $ver"
			# Logout terlebih dahulu supaya akun tidak tersangkut di server
			logout_wifi
			# Minta penggantian alamat IP
			releaseobtainnewip
			# Istirahat sebelum coba mengecek koneksi kembali
			sleep "$sleeptime"
		# Jika interface tidak terdeteksi atau mendapat kode status cURL 7, maka:
		elif [[ "$kodestatus" = "45" ]] || [[ "$kodestatus" = "7" ]]; then
			# Coba refresh interface terlebih dahulu
			refreshinterface
			# Istirahat sebelum coba mengecek koneksi kembali
			sleep "$sleeptime"
		# Jika terdeteksi cURL 0 & 7, maka:
		elif [[ "$kodestatuslanding" = "0" ]] && [[ "$kodestatus" = "7" ]]; then
			# Coba refresh interface terlebih dahulu
			refreshinterface
			# Tunggu selama 3 detik sebelum lanjut
			sleep 3
			# Lakukan login, lalu langsung cek status kembali
			login_wifi
		# Jika terdeteksi cURL 6 & 7, maka:
		elif [[ "$kodestatuslanding" = "6" ]] && [[ "$kodestatus" = "7" ]]; then
			# Coba refresh interface terlebih dahulu
			refreshinterface
		# Jika interface terdeteksi tidak memiliki IP (mendapat 2 kode status cURL 28), maka:
		elif [[ "$kodestatus" = "28" ]] && [[ "$kodestatuslanding" = "28" ]]; then
			# Coba refresh interface terlebih dahulu
			refreshinterface
			# Istirahat sebelum coba mengecek koneksi kembali
			sleep "$sleeptime"
		# Jika RX/TX rate interface terdeteksi tidak seimbang (misal salah satunya turun ke 0.0 atau 1.0 mbit/s), maka:
		elif [[ "$kodestatus" = "28" ]] && [[ "$kodestatuslanding" = "1" ]]; then
			# Coba refresh interface terlebih dahulu
			refreshinterface
			# Istirahat sebelum coba mengecek koneksi kembali
			sleep "$sleeptime"
		# Jika status user sedang aktif padahal tidak ada koneksi internet, maka:
		elif [[ "$loginout" = "Gagal Login (User Anda Sedang Aktif)" ]]; then
			# Coba logout terlebih dahulu
			logout_wifi
			# Lalu coba login kembali
			login_wifi
			# Istirahat sebelum mencoba kembali
			sleep "$sleeptime"
		# Jika status SSID tidak sesuai padahal sebenarnya sudah sesuai di jaringan WMS, maka:
		elif [[ "$loginout" = "Login Gagal (SSID Tidak Sesuai)" ]] && [[ "$wifivariant" = "wms" ]]; then
			# Coba logout terlebih dahulu
			logout_wifi
			# Lalu minta penggantian alamat IP
			releaseobtainnewip
			# Lalu coba login kembali
			login_wifi
			# Jika masih dan router tidak memiliki MAC tetap, maka:
			if [[ "$loginout" = "Login Gagal (SSID Tidak Sesuai)" ]] && [[ "$detectrandommac" != "" ]]; then
				# Reboot router supaya menggunakan MAC lain
				reboot
			fi
			# Istirahat sebelum mencoba kembali
			sleep "$sleeptime"
		# Jika login sebelumnya tidak diblokir, maka:
		else
			login_wifi
			sleep "$sleeptime"
		fi
	else
		# Istirahat sebelum coba mengecek koneksi kembali
		sleep "$sleeptime"
	fi
done